package game.action 
{
	import flash.geom.Point;
	import game.command.BattleAICommand;
	import game.command.BattleDataCommand;
	import game.command.BattleOptionPannelCommand;
	import game.command.BattleViewCommand;
	import game.notice.NoticeName;
	import game.model.GeneralModel;
	import game.notice.AddBattleCardToViewNotice;
	import game.notice.AddBattleWordNotice;
	import game.utils.BattleOwner;
	import game.utils.DataName;
	import game.model.GameProfile;
	import game.model.PositionsModel;
	import game.notice.BattleAINotice;
	import game.notice.BattleFightNotice;
	import game.notice.BattleGeneralPositionsNotice;
	import game.notice.BattleDataNotice;
	import game.notice.BattleViewNotice;
	import game.notice.CreateBattleGeneralNotice;
	import game.notice.LoadBattleAssetsNotice;
	import game.ui.BattleGeneral;
	import game.view.battle.BattleOpen;
	import game.view.battle.BattleView;
	import shipDock.data.ProfileProxy;
	import shipDock.framework.core.action.SDViewActoin;
	import shipDock.framework.core.interfaces.INotice;
	
	/**
	 * 战斗主界面逻辑代理
	 * 
	 * ...
	 * @author ...
	 */
	public class BattleViewAction extends SDViewActoin 
	{
		
		public static const NAME:String = "battleViewAction";
		
		private var _battleViewNotice:BattleViewNotice;
		private var _battleDataNotice:BattleDataNotice;
		
		public function BattleViewAction() 
		{
			super(NAME, BattleView);
			
			this.bindDataProxy(ProfileProxy.PROXY_NAME);//观察用户数据变更
		}
		
		override public function dispose():void 
		{
			super.dispose();
			
			this.unbindDataProxy(ProfileProxy.PROXY_NAME);//注销用户数据变更的观察
		}
		
		override protected function get listeners():Array 
		{
			return super.listeners.concat([
				NoticeName.BATTLE_VIEW,
				NoticeName.BATTLE_DATA,
			]);
		}
		
		public function sendBattleRequest():void {
			this.sendNotice(new BattleFightNotice("b001", true));//发送战斗的服务端请求
		}
		
		public function runBattleTics():void {
			this.battleViewNotice.sendSelf(this, BattleViewCommand.RUN_BATTLE_TICS_COMMAND);
		}
		
		public function runBattleAI():void {
			this.sendNotice(new BattleAINotice(BattleAICommand.RUN_AI_COMMAND));
		}
		
		public function stopBattleTics():void {
			this.battleViewNotice.sendSelf(this, BattleViewCommand.STOP_BATTLE_TICS_COMMAND);
		}
		
		public function updateDataOnFrame(time:Number):void {
			this.battleDataNotice.sendSelf(this, BattleDataCommand.UPDATE_BATTLE_DATA_ON_FRAME_COMMAND, [time]);
		}
		
		public function getCurrentGeneral(owner:int):PositionsModel {
			var result:PositionsModel = this.sendNotice(new BattleGeneralPositionsNotice(BattleDataCommand.GET_CURRENT_GENERAL_LIST_COMMAND, owner));
			return result;
		}
		
		override public function notify(notice:INotice):* 
		{
			var name:String = notice.name;
			if (name == DataName.BATTLE_DATA_SUBJECT) {
				var subCommand:String = notice.subCommand;
				if (subCommand == BattleViewCommand.UPDATE_BATTLE_VIEW_COMMAND) {
					//this.sendNotice(new BattleViewNotice(subCommand, notice);
					
				}else if (subCommand == BattleViewCommand.BATTLE_SKY_CHANGE_COMMAND) {
					
				}else if (subCommand == BattleOptionPannelCommand.BATTLE_PROPERTY_CHANGED_COMMAND) {
					
				}else if (subCommand == BattleViewCommand.BATTLE_END_COMMAND) {
					this.callProxyed(BattleViewNotice.STOP_TIC_NOTICE);
				}
			}
			return null;
		}
		
		public function get battleViewNotice():BattleViewNotice 
		{
			if (this._battleViewNotice == null) {
				this._battleViewNotice = new BattleViewNotice(null);
			}
			return _battleViewNotice;
		}
		
		public function get battleDataNotice():BattleDataNotice 
		{
			if (this._battleDataNotice == null) {
				this._battleDataNotice = new BattleDataNotice(null);
			}
			return _battleDataNotice;
		}
	}

}