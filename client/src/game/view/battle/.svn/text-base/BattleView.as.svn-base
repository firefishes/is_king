package game.view.battle 
{
	import flash.geom.Point;
	import game.action.BattleViewAction;
	import game.model.GeneralModel;
	import game.model.SkillModel;
	import game.notice.AddBattleCardToViewNotice;
	import game.notice.AddBattleWordNotice;
	import game.notice.BattleCardNotice;
	import game.notice.BattleOptionPannelNotice;
	import game.notice.BattleViewNotice;
	import game.ui.BattleCardIcon;
	import game.ui.BattleGeneral;
	import game.ui.BattleWords;
	import game.utils.BattleOwner;
	import game.view.battle.battleInit.BattleInitGeneralShow;
	import game.view.battle.battleInit.BattleInitStory;
	import shipDock.framework.application.component.SDImage;
	import shipDock.framework.application.component.SDQuadText;
	import shipDock.framework.application.component.SDSprite;
	import shipDock.framework.application.manager.ConfigManager;
	import shipDock.framework.application.SDConfig;
	import shipDock.framework.application.SDCore;
	import shipDock.framework.application.SDJuggler;
	import shipDock.framework.core.interfaces.INotice;
	import shipDock.framework.core.notice.CallProxyedNotice;
	import shipDock.framework.core.queueExecuter.QueueExecuter;
	import shipDock.framework.core.utils.HashMap;
	import shipDock.ui.View;
	import shipDock.ui.ViewChildQueueUnit;
	import starling.animation.IAnimatable;
	
	/**
	 * shaoxin.ji
	 * 
	 * ...
	 * @author ...
	 */
	public class BattleView extends View implements IAnimatable
	{
		
		private var _battleGridLayer:BattleGridLayer;
		private var _generalList:Array;//场上的将领列表
		
		private var _bgLayer:SDSprite;
		private var _generalLayer:SDSprite;//将领层
		private var _effectLayer:SDSprite;
		
		private var _battleContainer:SDSprite;
		private var _battleJuggler:SDJuggler;
		private var _core:SDCore;
		private var _lastTime:Number;
		private var _viewChildQueue:QueueExecuter;
		
		public function BattleView() 
		{
			super();
			this._UIConfigName = "battleView";
		}
		
		override protected function addEvents():void 
		{
			super.addEvents();
			this.addNotice(BattleViewNotice.INIT_BATTLE_VIEW_NOTICE, this.initBattleView);
			this.addNotice(BattleViewNotice.GET_BATTLE_POS_BY_GRID_NOTICE, this.getBattlePosByGrid);
			this.addNotice(BattleViewNotice.ADD_BATTLE_BG_NOTICE, this.addBattleBg);
			this.addNotice(BattleViewNotice.RUN_TIC_NOTICE, this.runTic);
			this.addNotice(BattleViewNotice.STOP_TIC_NOTICE, this.stopTic);
			this.addNotice(BattleViewNotice.UPDATE_BATTLE_VIEW_ON_FRAME_NOTICE, this.updateBattleViewOnFrame);
			this.addNotice(BattleViewNotice.ADD_BATTLE_CARD_TO_VIEW_NOTICE, this.addBattleCardToView);
			this.addNotice(BattleViewNotice.ADD_BATTLE_WORD_NOTICE, this.addBattleWord);
			this.addNotice(BattleViewNotice.UPDATE_BATTLE_VIEW_STATIC_TEXT_NOTICE, this.updateBattleViewStaticText);
			this.addNotice(BattleViewNotice.MERGE_BATTLE_DIALOG_TEXT_NOTICE, this.mergeBattleDialogText);
			this.addNotice(BattleViewNotice.ADD_BATTLE_GENERAL_TO_LIST_NOTIcE, this.addBattleGeneralToList);
			this.addNotice(BattleViewNotice.GET_BATTLE_OPEN_NOTICE, this.getBattleOpen);
			this.addNotice(BattleViewNotice.INIT_BATTLE_GENERAL_NOTICE, this.initBattleGeneral);
		}
		
		override protected function removeEvents():void 
		{
			super.removeEvents();
			this.removeNotice(BattleViewNotice.INIT_BATTLE_VIEW_NOTICE, this.initBattleView);
			this.removeNotice(BattleViewNotice.GET_BATTLE_POS_BY_GRID_NOTICE, this.getBattlePosByGrid);
			this.removeNotice(BattleViewNotice.ADD_BATTLE_BG_NOTICE, this.addBattleBg);
			this.removeNotice(BattleViewNotice.RUN_TIC_NOTICE, this.runTic);
			this.removeNotice(BattleViewNotice.STOP_TIC_NOTICE, this.stopTic);
			this.removeNotice(BattleViewNotice.UPDATE_BATTLE_VIEW_ON_FRAME_NOTICE, this.updateBattleViewOnFrame);
			this.removeNotice(BattleViewNotice.ADD_BATTLE_CARD_TO_VIEW_NOTICE, this.addBattleCardToView);
			this.removeNotice(BattleViewNotice.ADD_BATTLE_WORD_NOTICE, this.addBattleWord);
			this.removeNotice(BattleViewNotice.UPDATE_BATTLE_VIEW_STATIC_TEXT_NOTICE, this.updateBattleViewStaticText);
			this.removeNotice(BattleViewNotice.MERGE_BATTLE_DIALOG_TEXT_NOTICE, this.mergeBattleDialogText);
			this.removeNotice(BattleViewNotice.ADD_BATTLE_GENERAL_TO_LIST_NOTIcE, this.addBattleGeneralToList);
			this.removeNotice(BattleViewNotice.GET_BATTLE_OPEN_NOTICE, this.getBattleOpen);
			this.removeNotice(BattleViewNotice.INIT_BATTLE_GENERAL_NOTICE, this.initBattleGeneral);
		}
		
		override protected function disposeView():void 
		{
			super.disposeView();
			this._core.juggler.remove(this._battleJuggler);
			if(this._viewChildQueue != null) {
				this._viewChildQueue.dispose();
				this._viewChildQueue = null;
			}
		}
		
		override protected function initViewTexture():void 
		{
			super.initViewTexture();
			
			this._viewTextures = [["battleView"], []];
		}
		
		override protected function createUI():void 
		{
			super.createUI();
			
			this._core = SDCore.getInstance();
			this._battleJuggler = new SDJuggler();
			this._core.juggler.add(this._battleJuggler);
			/*this.setAction(new BattleViewAction());*/
			
			this._viewChildQueue = new QueueExecuter();
			
			this.createView();
			this.createBattleOptionPannel();
			
			this._viewChildQueue.add(this.createViewEnd);
			this._viewChildQueue.start();
			
			var troop:Object = ConfigManager.getInstance().getConfig("troop");
			for (var k:* in troop) {
				trace(troop[k]["atk"]);
			}
		}
		
		private function createView():void {
			
			var battleLayer:SDSprite = this.getEmptySpriteUI("gridLayer");
			BattleSetting.gridLayerOffsetPoint = new Point(battleLayer.x, battleLayer.y);
			this._battleGridLayer = new BattleGridLayer(battleLayer.x, battleLayer.y, 5, 10, 930, 450);
			
			var battleOpen:BattleOpen = new BattleOpen();
			battleOpen.name = "battleOpen";
			this.putChildraw(battleOpen);
			
			this._bgLayer = new SDSprite();
			this._generalLayer = new SDSprite();
			this._effectLayer = new SDSprite();
			
			this._battleContainer = new SDSprite();
			this._battleContainer.addChild(this._bgLayer);
			this._battleContainer.addChild(this._generalLayer);
			this._battleContainer.addChild(this._effectLayer);
			
			this.addChildAt(this._battleContainer, 0);
		}
		
		private function createBattleOptionPannel():void {
			var optionPannel:BattleOptionPannel = new BattleOptionPannel();
			this.putChildraw(optionPannel, "optionPannel");
			
			var p:SDSprite = this.getEmptySpriteUI("generalOptionPannel");
			this._viewChildQueue.add(new ViewChildQueueUnit(optionPannel, p));
		}
		
		private function createViewEnd():void {
			this.battleViewAction.sendBattleRequest();
		}
		
		private function addBattleBg(notice:INotice):void {
			var name:String = notice.data;
			var bg:SDImage = SDCore.getInstance().assetManager.getImage(name);
			this._bgLayer.addChild(bg);
		}
		
		private function initBattleGeneral(notice:CallProxyedNotice):void {
			this._generalList = [];
		}
		
		public function updateBattleViewOnFrame(notice:CallProxyedNotice):void {
			this._generalList.sortOn("y", Array.NUMERIC);
		}
		
		public function initBattleView(notice:CallProxyedNotice):void {
			
			var dataNotice:BattleViewNotice = notice.data;
			var userList:Array = this.battleViewAction.getCurrentGeneral(BattleOwner.USER_VALUE).positionsList;
			var enemyList:Array = this.battleViewAction.getCurrentGeneral(BattleOwner.ENEMY_VALUE).positionsList;
			
			var queue:QueueExecuter = new QueueExecuter();
			//初始化各属性槽、出场将领、对话
			queue.add(new BattleInitStory());
			queue.add(new BattleInitGeneralShow(userList, enemyList));
			queue.add(this.battleViewInited);
			queue.commit();
		}
		
		/**
		 * 这里正是开始战斗
		 * 
		 */
		private function battleViewInited():void {
			this._lastTime = 0;
			this.battleViewAction.runBattleAI();
			this.battleViewAction.runBattleTics();
		}
		
		public function runTic(notice:CallProxyedNotice):void {
			var dataNotice:BattleViewNotice = notice.data;
			this._battleJuggler.add(this);
		}
		
		public function stopTic(notice:CallProxyedNotice):void {
			var dataNotice:BattleViewNotice = notice.data;
			this._battleJuggler.remove(this);
		}
		
		private function addBattleGeneralToList(notice:CallProxyedNotice):void {
			var result:BattleGeneral = notice.data;
			this._generalList.push(result);
			this._generalLayer.addChild(result);
		}
		
		public function getBattlePosByGrid(notice:CallProxyedNotice):Point {
			var dataNotice:BattleViewNotice = notice.data;
			return this._battleGridLayer.getPosByGrid(dataNotice.data["row"], dataNotice.data["column"]);
		}
		
		/**
		 * 战场时间周期
		 * 
		 * @param	time
		 */
		public function advanceTime(time:Number):void {
			this._lastTime += time;
			if (this._lastTime >= 1 / this._core.frameRate) {
				
				this.battleViewAction.updateDataOnFrame(time);
				
				this._lastTime = 0;
			}
		}
		
		override public function redraw():void 
		{
			super.redraw();
			if (this.isPropertySet("updateBattleViewStaticText", true)) {
				this.commitStaticTextsChanged();
			}
		}
		
		private function mergeBattleDialogText(notice:CallProxyedNotice):void {
			var target:SDQuadText = notice.data as SDQuadText;
			this.addStaticQuadBatchText(target);
		}
		
		private function addBattleWord(notice:CallProxyedNotice):void {
			var dataNotice:AddBattleWordNotice = notice.data;
			var battleGeneral:BattleGeneral;
			for each(battleGeneral in this._generalList) {
				if (battleGeneral.generalModel.id == dataNotice.genralModel.id) {
					break;
				}
			}
			var battleWordsMap:HashMap = this.getPropertyChanged("battleWordsMap") as HashMap;
			if (battleWordsMap == null) {
				battleWordsMap = new HashMap();
			}
			battleWordsMap.put(dataNotice.genralModel, battleGeneral);
			this.changeProperty("battleWordsMap", battleWordsMap);
			
			var battleWords:BattleWords = new BattleWords(dataNotice.wordText, dataNotice.genralModel);
			battleWords.x = battleGeneral.x + battleGeneral.width / 2 * SDConfig.globalScale;
			battleWords.y = battleGeneral.y - battleGeneral.height;// / 2 * SDConfig.globalScale;
			this.addChild(battleWords);
		}
		
		private function addBattleCardToView(notice:CallProxyedNotice):void {
			var dataNotice:AddBattleCardToViewNotice = notice.data as AddBattleCardToViewNotice;
			var battleWordsMap:HashMap = this.getPropertyChanged("battleWordsMap") as HashMap;
			if (battleWordsMap != null) {
				var skillModel:SkillModel = dataNotice.skillModel;
				var generalModel:GeneralModel = skillModel.generalModel;
				var targetPos:Point = this.battleViewAction.callProxyed(BattleOptionPannelNotice.GET_BATTLE_CARD_TARGET_POS_NOTICE, dataNotice, true);
				var battleCardIcon:BattleCardIcon = new BattleCardIcon();
				battleCardIcon.data = {"battleCardModel":dataNotice.battleCardModel, "targetPos":targetPos, "ownerType":dataNotice.ownerType };
				var battleGeneral:BattleGeneral = battleWordsMap.getValue(generalModel, true) as BattleGeneral;
				battleCardIcon.x = battleGeneral.x;
				battleCardIcon.y = battleGeneral.y;
				this.addChild(battleCardIcon);
				
				this.battleViewAction.callProxyed(BattleCardNotice.BATTLE_CARD_ICON_READY_NOTICE, battleCardIcon);
			}
		}
		
		private function updateBattleViewStaticText(notice:CallProxyedNotice):void {
			this.changePropertySet("updateBattleViewStaticText", true);
			this.invalidate();
		}
		
		private function getBattleOpen(notice:CallProxyedNotice):BattleOpen {
			return this.getChildraw("battleOpen") as BattleOpen;
		}
		
		override public function commitStaticTextsChanged():void 
		{
			super.commitStaticTextsChanged();
		}
		
		private function get battleViewAction():BattleViewAction {
			return this.action as BattleViewAction;
		}
		
		private function get optionPannel():BattleOptionPannel {
			return this.getChildraw("optionPannel") as BattleOptionPannel;
		}
	}

}